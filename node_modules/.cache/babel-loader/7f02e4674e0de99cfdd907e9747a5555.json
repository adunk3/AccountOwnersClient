{"ast":null,"code":"import _objectSpread from \"/Users/alexduncan/accountownerclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport const convertStateToArrayOfFormObjects = formObject => {\n  const formElementsArray = [];\n\n  for (let key in formObject) {\n    formElementsArray.push({\n      id: key,\n      config: formObject[key]\n    });\n  }\n\n  return formElementsArray;\n};\n\nconst checkValidity = (value, validation) => {\n  let validationObject = {\n    isValid: true,\n    errorMessage: ''\n  };\n\n  if (validation) {\n    if (validation.required) {\n      validationObject.isValid = value.trim() !== '';\n      validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\n    }\n\n    if (validationObject.isValid && validation.maxLength) {\n      validationObject.isValid = value.length <= validation.maxLength;\n      validationObject.errorMessage = \"Not allowed more than \".concat(validation.maxLength, \" characters\");\n    }\n\n    return validationObject;\n  } else {\n    return validationObject;\n  }\n};\n\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\n  let formElement = _objectSpread({}, updatedOwnerForm[id]);\n\n  formElement.value = id === 'dateOfBirth' ? event : event.target.value;\n  formElement.touched = true;\n  const validationResponse = checkValidity(formElement.value, formElement.validation);\n  formElement.valid = validationResponse.isValid;\n  formElement.errorMessage = validationResponse.errorMessage;\n  return formElement;\n};\nexport const countInvalidElements = ownerForm => {\n  let countInvalidElements = 0;\n\n  for (let element in ownerForm) {\n    if (!ownerForm[element].valid) {\n      countInvalidElements = countInvalidElements + 1;\n      break;\n    }\n  }\n\n  return countInvalidElements;\n};","map":{"version":3,"sources":["/Users/alexduncan/accountownerclient/src/Utility/formUtilityActions.js"],"names":["convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","id","config","checkValidity","value","validation","validationObject","isValid","errorMessage","required","trim","maxLength","length","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","touched","validationResponse","valid","countInvalidElements","ownerForm","element"],"mappings":";AAAA,OAAO,MAAMA,gCAAgC,GAAIC,UAAD,IAAgB;AAE5D,QAAMC,iBAAiB,GAAG,EAA1B;;AAIA,OAAK,IAAIC,GAAT,IAAgBF,UAAhB,EAA4B;AACxBC,IAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,MAAAA,EAAE,EAAEF,GADe;AAEnBG,MAAAA,MAAM,EAAEL,UAAU,CAACE,GAAD;AAFC,KAAvB;AAIH;;AAID,SAAOD,iBAAP;AACH,CAhBM;;AAmBP,MAAMK,aAAa,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACzC,MAAIC,gBAAgB,GAAG;AACnBC,IAAAA,OAAO,EAAE,IADU;AAEnBC,IAAAA,YAAY,EAAE;AAFK,GAAvB;;AAIA,MAAIH,UAAJ,EAAgB;AACZ,QAAIA,UAAU,CAACI,QAAf,EAAyB;AACrBH,MAAAA,gBAAgB,CAACC,OAAjB,GAA2BH,KAAK,CAACM,IAAN,OAAiB,EAA5C;AACAJ,MAAAA,gBAAgB,CAACE,YAAjB,GAAgCF,gBAAgB,CAACC,OAAjB,GAA2B,EAA3B,GAAgC,mBAAhE;AACH;;AACD,QAAID,gBAAgB,CAACC,OAAjB,IAA4BF,UAAU,CAACM,SAA3C,EAAsD;AAClDL,MAAAA,gBAAgB,CAACC,OAAjB,GAA2BH,KAAK,CAACQ,MAAN,IAAgBP,UAAU,CAACM,SAAtD;AACAL,MAAAA,gBAAgB,CAACE,YAAjB,mCAAyDH,UAAU,CAACM,SAApE;AACH;;AACD,WAAOL,gBAAP;AACH,GAVD,MAWK;AACD,WAAOA,gBAAP;AACH;AACJ,CAnBD;;AAsBA,OAAO,MAAMO,qCAAqC,GAAG,CAACC,KAAD,EAAQC,gBAAR,EAA0Bd,EAA1B,KAAiC;AAElF,MAAIe,WAAW,qBAAQD,gBAAgB,CAACd,EAAD,CAAxB,CAAf;;AACAe,EAAAA,WAAW,CAACZ,KAAZ,GAAoBH,EAAE,KAAK,aAAP,GAAuBa,KAAvB,GAA+BA,KAAK,CAACG,MAAN,CAAab,KAAhE;AACAY,EAAAA,WAAW,CAACE,OAAZ,GAAsB,IAAtB;AACA,QAAMC,kBAAkB,GAAGhB,aAAa,CAACa,WAAW,CAACZ,KAAb,EAAoBY,WAAW,CAACX,UAAhC,CAAxC;AACAW,EAAAA,WAAW,CAACI,KAAZ,GAAoBD,kBAAkB,CAACZ,OAAvC;AACAS,EAAAA,WAAW,CAACR,YAAZ,GAA2BW,kBAAkB,CAACX,YAA9C;AACA,SAAOQ,WAAP;AAEH,CAVM;AAYP,OAAO,MAAMK,oBAAoB,GAAIC,SAAD,IAAe;AAC/C,MAAID,oBAAoB,GAAG,CAA3B;;AACA,OAAK,IAAIE,OAAT,IAAoBD,SAApB,EAA+B;AAC3B,QAAI,CAACA,SAAS,CAACC,OAAD,CAAT,CAAmBH,KAAxB,EAA+B;AAC3BC,MAAAA,oBAAoB,GAAGA,oBAAoB,GAAG,CAA9C;AACA;AACH;AACJ;;AACD,SAAOA,oBAAP;AACH,CATM","sourcesContent":["export const convertStateToArrayOfFormObjects = (formObject) => {\n\n    const formElementsArray = [];\n    \n\n\n    for (let key in formObject) {\n        formElementsArray.push({\n            id: key,\n            config: formObject[key]\n        });\n    }\n\n\n\n    return formElementsArray;\n}\n\n\nconst checkValidity = (value, validation) => {\n    let validationObject = {\n        isValid: true,\n        errorMessage: ''\n    };\n    if (validation) {\n        if (validation.required) {\n            validationObject.isValid = value.trim() !== '';\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\n        }\n        if (validationObject.isValid && validation.maxLength) {\n            validationObject.isValid = value.length <= validation.maxLength;\n            validationObject.errorMessage = `Not allowed more than ${validation.maxLength} characters`;\n        }\n        return validationObject;\n    }\n    else {\n        return validationObject;\n    }\n}\n\n\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\n\n    let formElement = { ...updatedOwnerForm[id] };\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\n    formElement.touched = true;\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\n    formElement.valid = validationResponse.isValid;\n    formElement.errorMessage = validationResponse.errorMessage;\n    return formElement;\n\n}\n\nexport const countInvalidElements = (ownerForm) => {\n    let countInvalidElements = 0;\n    for (let element in ownerForm) {\n        if (!ownerForm[element].valid) {\n            countInvalidElements = countInvalidElements + 1;\n            break;\n        }\n    }\n    return countInvalidElements;\n}"]},"metadata":{},"sourceType":"module"}