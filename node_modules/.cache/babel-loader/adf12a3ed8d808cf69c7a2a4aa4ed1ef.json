{"ast":null,"code":"import _objectSpread from \"/Users/alexduncan/accountownerclient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alexduncan/accountownerclient/src/containers/Owner/UpdateOwner/UpdateOwner.js\";\nimport React, { Component } from 'react';\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\nimport * as formUtilityActions from '../../../Utility/formUtilityActions';\nimport Input from '../../../UI/Inputs/Input';\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\n\nclass UpdateOwner extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ownerForm: {},\n      isFormValid: true\n    };\n\n    this.componentWillMount = () => {\n      this.setState({\n        ownerForm: returnInputConfiguration()\n      });\n    };\n\n    this.componentDidMount = () => {\n      const id = this.props.match.params.id;\n      const url = '/api/owner/' + id;\n      this.props.onGetOwnerById(url, _objectSpread({}, this.props));\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      const updatedOwnerForm = _objectSpread({}, this.state.ownerForm);\n\n      let nameObject = _objectSpread({}, updatedOwnerForm.name);\n\n      let dateObject = _objectSpread({}, updatedOwnerForm.dateOfBirth);\n\n      let addressObject = _objectSpread({}, updatedOwnerForm.address);\n\n      nameObject.value = nextProps.data.name;\n      nameObject.valid = true;\n      dateObject.value = moment(nextProps.data.dateOfBirth);\n      addressObject.value = nextProps.data.address;\n      addressObject.valid = true;\n      updatedOwnerForm['name'] = nameObject;\n      updatedOwnerForm['dateOfBirth'] = dateObject;\n      updatedOwnerForm['address'] = addressObject;\n      this.setState({\n        ownerForm: updatedOwnerForm\n      });\n    };\n\n    this.handleChangeEvent = (event, id) => {\n      const updatedOwnerForm = _objectSpread({}, this.state.ownerForm);\n\n      updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\n      const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\n      this.setState({\n        ownerForm: updatedOwnerForm,\n        isFormValid: counter === 0\n      });\n    };\n\n    this.redirectToOwnerList = () => {\n      this.props.history.push('/owner-List');\n    };\n\n    this.updateOwner = event => {\n      event.preventDefault();\n      const ownerToUpdate = {\n        name: this.state.ownerForm.name.value,\n        dateOfBirth: this.state.ownerForm.dateOfBirth.value,\n        address: this.state.ownerForm.address.value\n      };\n      const url = \"/api/owner/\" + this.props.data.id;\n      this.props.onUpdateOwner(url, ownerToUpdate, _objectSpread({}, this.props));\n    };\n  }\n\n  render() {\n    const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects(_objectSpread({}, this.state.ownerForm));\n    return React.createElement(Well, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form, {\n      horizontal: true,\n      onSubmit: this.updateOwner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, formElementsArray.map(element => {\n      return React.createElement(Input, {\n        key: element.id,\n        elementType: element.config.element,\n        id: element.id,\n        label: element.config.label,\n        type: element.config.type,\n        value: element.config.value,\n        changed: event => this.handleChangeEvent(event, element.id),\n        errorMessage: element.config.errorMessage,\n        invalid: !element.config.valid,\n        shouldValidate: element.config.validation,\n        touched: element.config.touched,\n        blur: event => this.handleChangeEvent(event, element.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Col, {\n      mdOffset: 6,\n      md: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      bsStyle: \"info\",\n      disabled: !this.state.isFormValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Update\")), React.createElement(Col, {\n      md: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsStyle: \"danger\",\n      onClick: this.redirectToOwnerList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Cancel\")))), React.createElement(SuccessModal, {\n      show: this.props.showSuccessModal,\n      modalHeaderText: 'Success message',\n      modalBodyText: 'Action completed successfylly',\n      okButtonText: 'OK',\n      successClick: () => this.props.onCloseSuccessModal('/owner-List', _objectSpread({}, this.props)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(ErrorModal, {\n      show: this.props.showErrorModal,\n      modalHeaderText: 'Error message',\n      modalBodyText: this.props.errorMessage,\n      okButtonText: 'OK',\n      closeModal: () => this.props.onCloseErrorModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.repository.data,\n    showSuccessModal: state.repository.showSuccessModal,\n    showErrorModal: state.errorHandler.showErrorModal,\n    errorMessage: state.errorHandler.errorMessage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\n    onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\n    onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\n    onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);","map":{"version":3,"sources":["/Users/alexduncan/accountownerclient/src/containers/Owner/UpdateOwner/UpdateOwner.js"],"names":["React","Component","Form","Well","Button","FormGroup","Col","returnInputConfiguration","formUtilityActions","Input","repositoryActions","errorHandlerActions","connect","moment","SuccessModal","ErrorModal","UpdateOwner","state","ownerForm","isFormValid","componentWillMount","setState","componentDidMount","id","props","match","params","url","onGetOwnerById","componentWillReceiveProps","nextProps","updatedOwnerForm","nameObject","name","dateObject","dateOfBirth","addressObject","address","value","data","valid","handleChangeEvent","event","executeValidationAndReturnFormElement","counter","countInvalidElements","redirectToOwnerList","history","push","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","render","formElementsArray","convertStateToArrayOfFormObjects","map","element","config","label","type","errorMessage","validation","touched","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","mapStateToProps","repository","errorHandler","mapDispatchToProps","dispatch","getData","owner","putData","closeSuccessModal","closeErrorModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\nimport * as formUtilityActions from '../../../Utility/formUtilityActions';\nimport Input from '../../../UI/Inputs/Input';\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\n\nclass UpdateOwner extends Component {\n    state = {\n        ownerForm: {},\n        isFormValid: true,\n    }\n\n    componentWillMount = () => {\n        this.setState({ ownerForm: returnInputConfiguration() });\n    }\n\n    componentDidMount = () => {\n        const id = this.props.match.params.id;\n        const url = '/api/owner/' + id;\n        this.props.onGetOwnerById(url, { ...this.props });\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        const updatedOwnerForm = { ...this.state.ownerForm };\n        let nameObject = { ...updatedOwnerForm.name };\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\n        let addressObject = { ...updatedOwnerForm.address };\n\n        nameObject.value = nextProps.data.name;\n        nameObject.valid = true;\n        dateObject.value = moment(nextProps.data.dateOfBirth);\n        addressObject.value = nextProps.data.address;\n        addressObject.valid = true;\n\n        updatedOwnerForm['name'] = nameObject;\n        updatedOwnerForm['dateOfBirth'] = dateObject;\n        updatedOwnerForm['address'] = addressObject;\n        this.setState({ ownerForm: updatedOwnerForm });\n    }\n\n    handleChangeEvent = (event, id) => {\n        const updatedOwnerForm = { ...this.state.ownerForm };\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\n\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\n\n        this.setState({ ownerForm: updatedOwnerForm, isFormValid: counter === 0 })\n    }\n\n    redirectToOwnerList = () => {\n        this.props.history.push('/owner-List');\n    }\n\n    updateOwner = (event) => {\n        event.preventDefault();\n\n        const ownerToUpdate = {\n            name: this.state.ownerForm.name.value,\n            dateOfBirth: this.state.ownerForm.dateOfBirth.value,\n            address: this.state.ownerForm.address.value\n        }\n\n        const url = \"/api/owner/\" + this.props.data.id;\n\n        this.props.onUpdateOwner(url, ownerToUpdate, { ...this.props });\n    }\n\n    render() {\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\n        return (\n            <Well>\n                <Form horizontal onSubmit={this.updateOwner}>\n                    {\n                        formElementsArray.map(element => {\n                            return <Input key={element.id}\n                                elementType={element.config.element}\n                                id={element.id} label={element.config.label}\n                                type={element.config.type} value={element.config.value}\n                                changed={(event) => this.handleChangeEvent(event, element.id)}\n                                errorMessage={element.config.errorMessage}\n                                invalid={!element.config.valid}\n                                shouldValidate={element.config.validation}\n                                touched={element.config.touched}\n                                blur={(event) => this.handleChangeEvent(event, element.id)} />\n                        })\n                    }\n                    <br />\n                    <FormGroup>\n                        <Col mdOffset={6} md={1}>\n                            <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\n                        </Col>\n                        <Col md={1}>\n                            <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\n                    modalBodyText={'Action completed successfylly'}\n                    okButtonText={'OK'}\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\n                    modalBodyText={this.props.errorMessage}\n                    okButtonText={'OK'}\n                    closeModal={() => this.props.onCloseErrorModal()} />\n            </Well>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        data: state.repository.data,\n        showSuccessModal: state.repository.showSuccessModal,\n        showErrorModal: state.errorHandler.showErrorModal,\n        errorMessage: state.errorHandler.errorMessage\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);"]},"metadata":{},"sourceType":"module"}